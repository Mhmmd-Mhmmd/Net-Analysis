# -*- coding: utf-8 -*-
"""Community_detection_03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HX6Jj7vOB4QTczUPmiucFG1huW5aAuja
"""

! pip install torch_geometric

import numpy as np
import random
import torch
from torch_geometric.utils import to_networkx
from torch_geometric.datasets import Planetoid
import networkx as nx
import matplotlib.pyplot as plt

dataset = Planetoid(root='/data/Cora', name='Cora')
graph = dataset[0]

def pyg_to_nx(graph, n_sample=None):

    G = to_networkx(graph, node_attrs=["x"])
    y = graph.y.numpy()

    if n_sample is not None:
        sampled_nodes = random.sample(g.nodes, n_sample)
        G = G.subgraph(sampled_nodes)
        y = y[sampled_nodes]

    return G, y

"""Add your Graph here, replace it with line below"""

G, y = pyg_to_nx(graph)

plt.figure(figsize=(9, 7))
nx.draw_spring(G, node_size=30, arrows=False, node_color=y)
plt.show()

print(len([i for i in nx.community.louvain_partitions(G)][0])) # if only hases one set

print(len([i for i in nx.community.louvain_communities(G)]))

print(len([i for i in nx.community.greedy_modularity_communities(G)]))

print(len([i for i in nx.community.asyn_lpa_communities(G,)]))

print(len([i for i in nx.community.label_propagation_communities(G.to_undirected())]))

print(len([i for i in nx.community.girvan_newman(G)]))

len(([i for i in nx.community.louvain_partitions(G)]))

def comms_with_overlap(G: nx.Graph):
    res = []
    for i in nx.community.louvain_partitions(G):
        res += i
    return res

print(comms_with_overlap(G))

